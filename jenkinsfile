pipeline {
    agent any

    environment {
        IMAGE_NAME = "rachmadiantyy/weather-api-tracker-dydy"
        DOCKERHUB_USER = "rachmadiantyy"
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo "Cloning repository..."
                git branch: 'main', url: 'https://github.com/rachmadiantyy/weather-api-tracker-dydy.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image..."
                script {
                    def IMAGE_TAG = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.IMAGE_FULL_NAME = "${IMAGE_NAME}:${IMAGE_TAG}"
                }
                sh 'docker build --no-cache --pull -t $IMAGE_FULL_NAME .'
            }
        }

        stage('Push to Docker Hub') {
            steps {
                echo "Pushing Docker image to Docker Hub..."
                withCredentials([string(credentialsId: 'docker-hub-token', variable: 'DOCKERHUB_TOKEN')]) {
                    sh '''
                    echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USER" --password-stdin
                    docker push $IMAGE_FULL_NAME
                    '''
                }
            }
        }

        stage('Deploy to Server') {
            steps {
                echo "Preparing deploy script..."
                script {
                    withCredentials([string(credentialsId: 'docker-hub-token', variable: 'DOCKERHUB_TOKEN')]) { 
                        def deployScript = """
                        #!/bin/bash
                        export DOCKERHUB_TOKEN="$DOCKERHUB_TOKEN"
                        echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USER" --password-stdin
                        docker pull $IMAGE_FULL_NAME
                        docker stop weather-api || true
                        docker rm weather-api || true
                        docker run -d --name weather-api -p 8000:8000 --restart always $IMAGE_FULL_NAME
                        docker system prune -f
                        """
                        writeFile file: 'deploy.sh', text: deployScript
                    }
                }

                echo "Copying deploy script to server..."
                sh 'scp -o StrictHostKeyChecking=no deploy.sh root@116.204.251.227:/root/deploy.sh'
                sh 'ssh -o StrictHostKeyChecking=no root@116.204.251.227 "chmod +x /root/deploy.sh"'

                echo "Executing deploy script on server..."
                sh 'ssh -o StrictHostKeyChecking=no root@116.204.251.227 "bash /root/deploy.sh"'
            }
        }
    }
}
